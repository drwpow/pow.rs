---
import { Code } from 'astro/components';
import PostLayout from '../../layouts/post.astro';

export const frontmatter = {
  title: 'Don’t use HSL',
  description: 'HSL is great in theory, but worse than you realize in practice',
  date: '2021-11-14',
  updated_at: '2022-10-19',
  tags: ['design', 'dev'],
};
---

<PostLayout content={frontmatter}>
  <p>
    Making websites usually involves <em
      ><span style="color:#f00">C</span><span style="color:#f80">O</span><span style="color:#ff0">L</span><span style="color:#0f0">O</span><span style="color:#0ff">R</span><span style="color:#f0f">S</span>
    </em> (they’re all the rage these days!).
  </p>

  <p>
    You’ll no doubt find <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl()" target="_blank" rel="noopener noreferrer">HSL</a> easier to work with as a developer, since it was designed to manipulate colors more directly.
    However, just because it’s easy to edit doesn’t mean it’s a superior format. In fact, quite the opposite.
  </p>

  <h2>HSL is missing a lot more than it gives</h2>

  <p>
    There’s not a 1:1 conversion between HSL and RGB. In one sense this is obvious, because HSL’s appeal is that it’s _not_ RGB. But in another sense, just _how_ different they are can often be overlooked, and you’d be forgiven for not
    realizing HSL is as bad as it is.
  </p>

  <table>
    <thead>
      <tr>
        <th>format</th>
        <th class="tac">formula</th>
        <th class="tar">values</th>
        <th class="tar">spread</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>RGB</td>
        <td class="tac"><small>256 ^ 3</small></td>
        <td class="tar"><code>16,777,216</code></td>
        <td>100%</td>
      </tr>
      <tr>
        <td>HSL</td>
        <td class="tac"><small>360 ✕ 100 ✕ 100</small></td>
        <td class="tar"><code>3,600,000</code></td>
        <td class="tar">22%</td>
      </tr>
    </tbody>
  </table>

  <p>
    Just comparing the possible values, HSL is missing almost 80% of RGB’s. But if throwing away 80% of colors weren’t bad enough, it’s actually worse! Not every HSL value maps to a <em>unique</em> RGB color, and there are multiple ways to express
    the same color in HSL. For example, when saturation is <code>0</code>, HSL has 36,000 different values that generate only <code>100</code> grays. When you remove all the duplicates, HSL is missing closer to
    <b>85%</b> of RGB’s colors (<a href="https://gist.github.com/drwpow/0fabf0cc932285ad023ca39e6f9ed35d" target="_blank" rel="noopener noreferrer">source</a>). And when is an 85% loss in quality ever acceptable?
  </p>

  <blockquote>When is an 85% loss in quality ever acceptable?</blockquote>

  <p>
    <i>HSL can accept decimals, though!</i> you may think. However, when you try to manage HSL values with a single decimal place, it skyrockets to 3.6 <em>billion</em>
    possible values and becomes a barren wasteland of mostly-duplicated colors. Since now most adjustments won’t end up changing the color at all, it means using HSL with decimals makes it worthless.
  </p>

  <p>So back to our original premise: when <b>storing colors,</b> HSL is a terrible format to use because it’s missing so much of the RGB colorspace. And attempting to fill in those gaps results in mostly-useless values.</p>

  <h2>The “L” stands for “Ludicrous”</h2>

  <p>If missing colors weren’t bad enough, the colors that <em>are</em> there are widly distorted. It’s assumed that the <code>L</code> in HSL designates the lightness of a color, right? Well, in theory, yes, but in practice…</p>

  <figure>
    <img alt="the dips in the graph represent impossible colors" src="/assets/posts/dont-use-hsl-for-anything/sitnik_hsl_twitter.png" />
    <figcaption>via <a href="https://twitter.com/sitnikcode/status/1470755010464161794">@sitnik</a></figcaption>
  </figure>

  <p>Turns out lightness as expressed in HSL is really useless when translating from one hue to another. Compare all these values that have 50% lightness in HSL, when compared to their grayscale equivalents:</p>

  <div style="display:grid;grid-template-columns:33.333% 33.333% 33.333%;height:8rem">
    <div style="background:hsl(0, 100%, 50%)"></div>
    <div style="background:hsl(60, 100%, 50%)"></div>
    <div style="background:hsl(240, 100%, 50%)"></div>
    <div style="background:rgb(135, 135, 135)"></div>
    <div style="background:rgb(237, 237, 237)"></div>
    <div style="background:rgb(82, 82, 82)"></div>
  </div>

  <p><i>Calculated using <a href="https://github.com/drwpow/better-color-tools" target="_blank" rel="noopener noreferrer">better-color-tools</a></i></p>

  <p>
    Not even close. Yellow is significantly brighter than the other colors! While
    <code>L</code> does have a purpose, it’s usually not what people think.
  </p>

  <h2>Use OKLCH instead</h2>

  <p>
    <a href="https://bottosson.github.io/posts/oklab/" target="_blank" rel="noopener noreferrer">OKLAB</a> (and its companion, OKLCH) are new-ish colorspaces that provide better color distribution for RGB when manipulating values. Though it
    may or may not make it into the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color()" target="_blank" rel="noopener noreferrer">CSS color function</a>, it can be used today via a library like <a
      href="https://github.com/drwpow/better-color-tools"
      target="_blank"
      rel="noopener noreferrer">better-color-tools</a
    > which uses OKLAB/OKLCH for all operations by default.
  </p>

  <p>
    OKLCH, or “OK” LCH, will feel instantly familiar when you realize it stands for <b>L</b>ightness, <b>C</b>hroma, and <b>H</b>ue. If you rearranged it to <i>HCL</i>, you’d find the only difference from HSL is <i>chroma</i> vs <i
      >saturation</i
    > (which was changed to reflect a more accurate description of what that value does). You can manipulate colors like so:
  </p>

  <Code
    code={`import better from 'better-color-tools';

const color = better.from('#b3f6e6').oklchVal; // lightness: 92.4%, chroma: 7%, hue: 178
const color2 = better.darken('#b3f6e6', 0.1);  // lightness: 82.4%, chroma: 7%, hue: 178`}
    lang="ts"
  />

  <p>Or, if you’re using Sass:</p>

  <Code
    code={`@use 'better-color-tools';

.btn:hover {
  background-color: better.darken(#b3f6e6, 0.1);
}`}
    lang="scss"
  />

  <p>
    So again, it’s not that the <em>premise</em> of manipulating color via hue, lightness, and chroma/saturation are flawed; it’s simply that HSL’s <em>implementation</em> of it is unusable if you care about color integrity even a little bit.
    And OKLCH fits the bill exactly.
  </p>

  <p>So please, for the love of everyone’s eyeballs, don’t use HSL.</p>
</PostLayout>
